{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"},"colab":{"name":"TF Certificate 3 이미지 분류 (rps) - 실습의 사본","provenance":[{"file_id":"1R9HYXAuuE3KskZUNR77IcdKv4IKa0RLY","timestamp":1607698978656},{"file_id":"1pDy-LusM59mwS4EzgMJqjRi2Ax4mm8rb","timestamp":1596038474323},{"file_id":"1TzFySKcu0RKMCzyeJqK1zyoPgAFuzexP","timestamp":1596037252005}],"collapsed_sections":[]},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"sCmtzkeGPI2Q"},"source":["# Category 3\n","\n","Convolution Neural Network (합성곱 신경망)를 활용한 이미지 분류 (Image Classification)"]},{"cell_type":"markdown","metadata":{"id":"iRSKbgK8PRs5"},"source":["## 확인"]},{"cell_type":"markdown","metadata":{"id":"Fc4QcKvRPSj-"},"source":["1. GPU 옵션 켜져 있는지 확인할 것!!! (수정 - 노트설정 - 하드웨어설정 (GPU))"]},{"cell_type":"markdown","metadata":{"id":"JNPjnA62PXVn"},"source":["## 순서"]},{"cell_type":"markdown","metadata":{"id":"T463L0aPPX_n"},"source":["1. **import**: 필요한 모듈 import\n","2. **전처리**: 학습에 필요한 데이터 전처리를 수행합니다.\n","3. **모델링(model)**: 모델을 정의합니다.\n","4. **컴파일(compile)**: 모델을 생성합니다.\n","5. **학습 (fit)**: 모델을 학습시킵니다."]},{"cell_type":"markdown","metadata":{"id":"W1Hj9c1NPbPu"},"source":["## 문제"]},{"cell_type":"code","metadata":{"id":"NMK_JDN3XLFd"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RcvEYUuhPb3f"},"source":["For this task you will build a classifier for Rock-Paper-Scissors \n","based on the rps dataset.\n","\n","IMPORTANT: Your final layer should be as shown, do not change the\n","provided code, or the tests may fail\n","\n","IMPORTANT: Images will be tested as 150x150 with 3 bytes of color depth\n","So ensure that your input layer is designed accordingly, or the tests\n","may fail. \n","\n","NOTE THAT THIS IS UNLABELLED DATA. \n","You can use the ImageDataGenerator to automatically label it\n","and we have provided some starter code.\n","\n","-------------------------------\n","\n","이 작업에서는 Rock-Paper-Scissors에 대한 분류기를 작성합니다.\n","rps 데이터 셋을 기반으로합니다.\n","\n","중요 : 최종 레이어는 그림과 같아야합니다.\n","\n","중요 : 이미지는 3 바이트 150x150의 컬러사진으로 테스트됩니다.\n","따라서 입력 레이어가 그에 따라 설계되었거나 테스트되었는지 확인하십시오.\n","\n","ImageDataGenerator를 사용하여 자동으로 레이블을 지정할 수 있습니다."]},{"cell_type":"markdown","metadata":{"id":"7C3ewm9XQHgr"},"source":["-----------------------------------\n"]},{"cell_type":"markdown","metadata":{"id":"U6JA3oYDQJno"},"source":["# 실습"]},{"cell_type":"markdown","metadata":{"id":"TwblClY4QLkb"},"source":["## STEP 1. import "]},{"cell_type":"code","metadata":{"id":"_RAc5nAU1LkA","executionInfo":{"status":"ok","timestamp":1608550563141,"user_tz":-540,"elapsed":588,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}}},"source":["import urllib.request\n","import zipfile\n","import numpy as np\n","from IPython.display import Image\n","\n","import tensorflow as tf\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dropout, Dense, AveragePooling2D\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ModelCheckpoint"],"execution_count":109,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gzV-1NNX1LkV"},"source":["## STEP 1. Load Dataset"]},{"cell_type":"markdown","metadata":{"id":"eOOsLCAj1LkW"},"source":["가위바위보에 대한 손의 사진을 가지고 `가위`인지, `바위`인지, `보자기`인지 분류하는 `classification` 문제입니다."]},{"cell_type":"code","metadata":{"id":"5g1dTl_q1LkX","executionInfo":{"status":"ok","timestamp":1608537632335,"user_tz":-540,"elapsed":5305,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}}},"source":["url = 'https://storage.googleapis.com/download.tensorflow.org/data/rps.zip'\n","urllib.request.urlretrieve(url, 'rps.zip')\n","local_zip = 'rps.zip'\n","zip_ref = zipfile.ZipFile(local_zip, 'r')\n","zip_ref.extractall('tmp/')"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QWULnRzA1Lkd"},"source":["## STEP 2. 전처리 (ImageDataGenerator)"]},{"cell_type":"markdown","metadata":{"id":"9YoiAzkbQWAO"},"source":["데이터셋의 경로를 지정해 주세요 (root 폴더의 경로를 지정하여야 합니다.)\n"]},{"cell_type":"markdown","metadata":{"id":"R3HJbL5XSDlN"},"source":["[코드]"]},{"cell_type":"code","metadata":{"id":"fFJb6A9z1Lkd","executionInfo":{"status":"ok","timestamp":1608537632337,"user_tz":-540,"elapsed":5304,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}}},"source":["TRAINING_DIR = \"tmp/rps/\""],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IjKarwpkQoEr"},"source":["`ImageDataGenerator`를 정의합니다.\n","\n","다음의 옵션 값들로 Image Aumentation(이미지 변형) 옵션을 적절히 조절해 주세요\n","\n","* `rescale`: 이미지의 픽셀 값을 조정\n","* `rotation_range`: 이미지 회전\n","* `width_shift_range`: 가로 방향으로 이동\n","* `height_shift_range`: 세로 방향으로 이동\n","* `shear_range`: 이미지 굴절\n","* `zoom_range`: 이미지 확대\n","* `horizontal_flip`: 횡 방향으로 이미지 반전\n","* `fill_mode`: 이미지를 이동이나 굴절시켰을 때 빈 픽셀 값에 대하여 값을 채우는 방식\n","* `validation_split`: validation set의 구성 비율"]},{"cell_type":"markdown","metadata":{"id":"DGslGzIrSE9U"},"source":["[코드]"]},{"cell_type":"code","metadata":{"id":"KemaTeRd1Lkp","executionInfo":{"status":"ok","timestamp":1608537637107,"user_tz":-540,"elapsed":746,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}}},"source":["training_datagen = ImageDataGenerator(\n","    rescale=1. / 255,\n","    rotation_range =40,\n","    width_shift_range =0.2,\n","    height_shift_range=0.2,\n","    shear_range= 0.2,\n","    zoom_range =0.2,\n","    horizontal_flip = True,\n","    fill_mode = 'nearest',\n","    validation_split=0.2\n","    )\n"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WZXWPiKY1Lkt"},"source":["ImageDataGenerator를 잘 만들어 주었다면, `flow_from_directory`로 이미지를 어떻게 공급해 줄 것인가를 지정해 주어야합니다.\n","\n","* train / validation set 전용 generator를 별도로 정의합니다.\n","* `batch_size`를 정의합니다 (128)\n","* `target_size`를 정의합니다. (150 x 150). 이미지를 알아서 타겟 사이즈 만큼 잘라내어 공급합니다.\n","* `class_mode`는 3개 이상의 클래스인 경우 'categorical' 이진 분류의 경우 `binary`를 지정합니다.\n","* `subset`을 지정합니다. (training / validation)\n"]},{"cell_type":"markdown","metadata":{"id":"-aaAbYk4RqBd"},"source":["**training_generator**에 대한 `from_from_directory`를 정의합니다.\n","\n","* 2016 개의 이미지가 출력되어야 합니다."]},{"cell_type":"markdown","metadata":{"id":"LiYxxiZXSGI_"},"source":["[코드]"]},{"cell_type":"code","metadata":{"id":"y4gbMm121Lk0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608537638308,"user_tz":-540,"elapsed":658,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}},"outputId":"c7b722e7-8a71-467b-8f0e-6a817bb5757e"},"source":["training_generator = training_datagen.flow_from_directory(TRAINING_DIR, \n","                                                          batch_size =128,\n","                                                          target_size =(150,150),                                                          \n","                                                          class_mode='categorical',\n","                                                          subset='training',\n","                                                         )"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Found 2016 images belonging to 3 classes.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"r89m3meDRx8k"},"source":["**validation_generator**에 대한 `from_from_directory`를 정의합니다.\n","\n","* 504 개의 이미지가 출력되어야 합니다."]},{"cell_type":"markdown","metadata":{"id":"6Wdicm3XSHT9"},"source":["[코드]"]},{"cell_type":"code","metadata":{"id":"_bAYGsIm1aZG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608537639698,"user_tz":-540,"elapsed":688,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}},"outputId":"7999ea84-cb5f-430c-9a6f-095d9a6f651a"},"source":["validation_generator = training_datagen.flow_from_directory(TRAINING_DIR, \n","                                                            batch_size =128,\n","                                                            target_size=(150,150),\n","                                                            class_mode = 'categorical',\n","                                                            subset='validation', \n","                                                            )"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Found 504 images belonging to 3 classes.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"MKi8C1eoSB52"},"source":["## STEP 3. 모델 정의 (Sequential)"]},{"cell_type":"code","metadata":{"id":"Iwj8Q1ZR1Llt","executionInfo":{"status":"ok","timestamp":1608551199970,"user_tz":-540,"elapsed":863,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}}},"source":["    model = Sequential([\n","    Conv2D(64, (3,3), activation='relu', input_shape=(150,150,3)),\n","    MaxPooling2D(2,2),\n","    Conv2D(64,(3,3), activation='relu'),\n","    MaxPooling2D(2,2),\n","    Conv2D(128,(3,3), activation='relu'),\n","    MaxPooling2D(2,2),\n","    Conv2D(128,(3,3), activation='relu'),\n","    MaxPooling2D(2,2),\n","    Flatten(),\n","    Dropout(0.6), #0.6으로 바꿈\n","    #Dense\n","    Dense(128, activation='relu'), #추가\n","    Dense(512, activation='relu'),\n","    Dense(3, activation='softmax')\n"," ])"],"execution_count":116,"outputs":[]},{"cell_type":"code","metadata":{"id":"Pw_G-lkR1Llv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608551199970,"user_tz":-540,"elapsed":405,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}},"outputId":"2747997f-fc6e-405b-e406-3aa4cef41767"},"source":["model.summary()"],"execution_count":117,"outputs":[{"output_type":"stream","text":["Model: \"sequential_28\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_147 (Conv2D)          (None, 148, 148, 64)      1792      \n","_________________________________________________________________\n","max_pooling2d_146 (MaxPoolin (None, 74, 74, 64)        0         \n","_________________________________________________________________\n","conv2d_148 (Conv2D)          (None, 72, 72, 64)        36928     \n","_________________________________________________________________\n","max_pooling2d_147 (MaxPoolin (None, 36, 36, 64)        0         \n","_________________________________________________________________\n","conv2d_149 (Conv2D)          (None, 34, 34, 128)       73856     \n","_________________________________________________________________\n","max_pooling2d_148 (MaxPoolin (None, 17, 17, 128)       0         \n","_________________________________________________________________\n","conv2d_150 (Conv2D)          (None, 15, 15, 128)       147584    \n","_________________________________________________________________\n","max_pooling2d_149 (MaxPoolin (None, 7, 7, 128)         0         \n","_________________________________________________________________\n","flatten_27 (Flatten)         (None, 6272)              0         \n","_________________________________________________________________\n","dropout_28 (Dropout)         (None, 6272)              0         \n","_________________________________________________________________\n","dense_72 (Dense)             (None, 128)               802944    \n","_________________________________________________________________\n","dense_73 (Dense)             (None, 512)               66048     \n","_________________________________________________________________\n","dense_74 (Dense)             (None, 3)                 1539      \n","=================================================================\n","Total params: 1,130,691\n","Trainable params: 1,130,691\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"4NhjbLsU1Ll0"},"source":["## STEP 4. 컴파일 (compile)"]},{"cell_type":"markdown","metadata":{"id":"cdjO-SoLSohD"},"source":["1. `optimizer`는 가장 최적화가 잘되는 알고리즘인 'adam'을 사용합니다.\n","2. `loss`는 무엇을 지정하면 좋을까요? (`categorical_crossentropy` / `sparse_categorical_crossentropy`)\n","3. `metrics`를 'acc' 혹은 'accuracy'로 지정하면, 학습시 정확도를 모니터링 할 수 있습니다."]},{"cell_type":"code","metadata":{"id":"yzw3sIaB1Ll0","executionInfo":{"status":"ok","timestamp":1608551201687,"user_tz":-540,"elapsed":688,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}}},"source":["model.compile(  optimizer = 'adam', loss='categorical_crossentropy', metrics=['acc']  )"],"execution_count":118,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yJ0gsuoqSv7z"},"source":["## STEP 5. ModelCheckpoint"]},{"cell_type":"markdown","metadata":{"id":"oXHmDZ2aSx4O"},"source":["`val_loss` 기준으로 epoch 마다 최적의 모델을 저장하기 위하여, ModelCheckpoint를 만듭니다.\n","* `checkpoint_path`는 모델이 저장될 파일 명을 설정합니다.\n","* `ModelCheckpoint`을 선언하고, 적절한 옵션 값을 지정합니다."]},{"cell_type":"markdown","metadata":{"id":"s1i6HUSiSzbL"},"source":["[코드]"]},{"cell_type":"code","metadata":{"id":"ogAVTqJAS0um","executionInfo":{"status":"ok","timestamp":1608551202441,"user_tz":-540,"elapsed":801,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}}},"source":["checkpoint_path = 'tmp_checkpoint.chpt'\n","checkpoint = ModelCheckpoint(filepath=checkpoint_path,\n","                             save_weights_only=True,\n","                             save_best_only=True,\n","                             monitor='val_loss',\n","                             verbose=1)"],"execution_count":119,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"820Nfvw81Ll5"},"source":["## STEP 6. 학습 (fit)"]},{"cell_type":"code","metadata":{"id":"3ABVaDUNc96j","executionInfo":{"status":"ok","timestamp":1608551202441,"user_tz":-540,"elapsed":546,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}}},"source":["epochs=20"],"execution_count":120,"outputs":[]},{"cell_type":"code","metadata":{"id":"4nEYWWR-cJRG","executionInfo":{"status":"ok","timestamp":1608551202441,"user_tz":-540,"elapsed":414,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}}},"source":[""],"execution_count":120,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ifj14vP71LmA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608551564307,"user_tz":-540,"elapsed":362156,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}},"outputId":"869e13ba-b22c-4640-ab88-6f7127259a79"},"source":["history = model.fit(\n","          training_generator, validation_data=(validation_generator),\n","          epochs=epochs,\n","          callbacks=[checkpoint],\n","          )"],"execution_count":121,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","16/16 [==============================] - 19s 1s/step - loss: 1.1031 - acc: 0.3614 - val_loss: 1.1024 - val_acc: 0.3750\n","\n","Epoch 00001: val_loss improved from inf to 1.10239, saving model to tmp_checkpoint.chpt\n","Epoch 2/20\n","16/16 [==============================] - 18s 1s/step - loss: 1.0863 - acc: 0.3950 - val_loss: 1.0474 - val_acc: 0.3671\n","\n","Epoch 00002: val_loss improved from 1.10239 to 1.04736, saving model to tmp_checkpoint.chpt\n","Epoch 3/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.9548 - acc: 0.5083 - val_loss: 0.9115 - val_acc: 0.6548\n","\n","Epoch 00003: val_loss improved from 1.04736 to 0.91149, saving model to tmp_checkpoint.chpt\n","Epoch 4/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.7367 - acc: 0.6869 - val_loss: 0.7670 - val_acc: 0.6151\n","\n","Epoch 00004: val_loss improved from 0.91149 to 0.76699, saving model to tmp_checkpoint.chpt\n","Epoch 5/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.5389 - acc: 0.7687 - val_loss: 0.7014 - val_acc: 0.6488\n","\n","Epoch 00005: val_loss improved from 0.76699 to 0.70145, saving model to tmp_checkpoint.chpt\n","Epoch 6/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.4328 - acc: 0.8270 - val_loss: 0.5810 - val_acc: 0.7679\n","\n","Epoch 00006: val_loss improved from 0.70145 to 0.58100, saving model to tmp_checkpoint.chpt\n","Epoch 7/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.3003 - acc: 0.8923 - val_loss: 2.1741 - val_acc: 0.4187\n","\n","Epoch 00007: val_loss did not improve from 0.58100\n","Epoch 8/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.7755 - acc: 0.6772 - val_loss: 0.7027 - val_acc: 0.6667\n","\n","Epoch 00008: val_loss did not improve from 0.58100\n","Epoch 9/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.3795 - acc: 0.8627 - val_loss: 0.7326 - val_acc: 0.6806\n","\n","Epoch 00009: val_loss did not improve from 0.58100\n","Epoch 10/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.2481 - acc: 0.9153 - val_loss: 0.6996 - val_acc: 0.6567\n","\n","Epoch 00010: val_loss did not improve from 0.58100\n","Epoch 11/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.1761 - acc: 0.9401 - val_loss: 0.6533 - val_acc: 0.7460\n","\n","Epoch 00011: val_loss did not improve from 0.58100\n","Epoch 12/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.1965 - acc: 0.9325 - val_loss: 0.6157 - val_acc: 0.7460\n","\n","Epoch 00012: val_loss did not improve from 0.58100\n","Epoch 13/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.1094 - acc: 0.9626 - val_loss: 0.5614 - val_acc: 0.7540\n","\n","Epoch 00013: val_loss improved from 0.58100 to 0.56144, saving model to tmp_checkpoint.chpt\n","Epoch 14/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.1144 - acc: 0.9557 - val_loss: 0.4405 - val_acc: 0.8373\n","\n","Epoch 00014: val_loss improved from 0.56144 to 0.44047, saving model to tmp_checkpoint.chpt\n","Epoch 15/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.1129 - acc: 0.9612 - val_loss: 0.7197 - val_acc: 0.7143\n","\n","Epoch 00015: val_loss did not improve from 0.44047\n","Epoch 16/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.1123 - acc: 0.9599 - val_loss: 0.8435 - val_acc: 0.6250\n","\n","Epoch 00016: val_loss did not improve from 0.44047\n","Epoch 17/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.0787 - acc: 0.9700 - val_loss: 0.8963 - val_acc: 0.6488\n","\n","Epoch 00017: val_loss did not improve from 0.44047\n","Epoch 18/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.0858 - acc: 0.9680 - val_loss: 0.6735 - val_acc: 0.6905\n","\n","Epoch 00018: val_loss did not improve from 0.44047\n","Epoch 19/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.0643 - acc: 0.9775 - val_loss: 0.7671 - val_acc: 0.7540\n","\n","Epoch 00019: val_loss did not improve from 0.44047\n","Epoch 20/20\n","16/16 [==============================] - 18s 1s/step - loss: 0.0820 - acc: 0.9696 - val_loss: 0.4865 - val_acc: 0.8155\n","\n","Epoch 00020: val_loss did not improve from 0.44047\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"shzhTOjAninH"},"source":["## STEP 7. 학습 완료 후 Load Weights (ModelCheckpoint)"]},{"cell_type":"markdown","metadata":{"id":"kLqb_6XrMvdq"},"source":["학습이 완료된 후에는 반드시 `load_weights`를 해주어야 합니다.\n","\n","그렇지 않으면, 열심히 ModelCheckpoint를 만든 의미가 없습니다."]},{"cell_type":"markdown","metadata":{"id":"jcXHQ_pNM_zA"},"source":["[코드]"]},{"cell_type":"code","metadata":{"id":"4jO1ucZ9ninH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607936618118,"user_tz":-540,"elapsed":834,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}},"outputId":"4f765b96-ff65-4586-aadf-91373427bc0b"},"source":["model.load_weights(checkpoint_path)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.training.tracking.util.CheckpointLoadStatus at 0x7fd494c68a58>"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3UBTFifKhIu2","executionInfo":{"status":"ok","timestamp":1607937150387,"user_tz":-540,"elapsed":1005,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}},"outputId":"0064d75b-74de-44b5-a0a5-feffd7fc4878"},"source":["print(np.arange(1,epochs+1))\r\n","print(history.history['acc'])\r\n","print(len(history.history['acc']))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n"," 25]\n","[0.3432539701461792, 0.3844245970249176, 0.4751984179019928, 0.625, 0.7490079402923584, 0.8065476417541504, 0.855654776096344, 0.90625, 0.9345238208770752, 0.94692462682724, 0.9117063283920288, 0.9499008059501648, 0.9756944179534912, 0.9702380895614624, 0.9727182388305664, 0.9682539701461792, 0.9742063283920288, 0.9771825671195984, 0.9811508059501648, 0.9801587462425232, 0.9742063283920288, 0.9747023582458496, 0.9796627163887024, 0.9851190447807312, 0.9776785969734192]\n","25\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":572},"id":"RqdcIigKdV_c","executionInfo":{"status":"ok","timestamp":1607938410238,"user_tz":-540,"elapsed":1076,"user":{"displayName":"최종찬","photoUrl":"","userId":"12659814370838060539"}},"outputId":"6d43c96b-ef96-4976-ec13-7da7dc5b105d"},"source":["import matplotlib.pyplot as plt\r\n","\r\n","\r\n","plt.figure(figsize=(12,9))\r\n","plt.plot(np.arange(1,epochs+1), history.history['acc'])\r\n","plt.plot(np.arange(1,epochs+1), history.history['loss'])\r\n","plt.title('Acc/Loss', fontsize=20)\r\n","plt.xlabel('Epochs')\r\n","plt.ylabel('Acc/Loss')\r\n","plt.legend(['acc', 'Loss'], fontsize=15)\r\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x648 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"v2xT6rGtlnjz"},"source":[""],"execution_count":null,"outputs":[]}]}